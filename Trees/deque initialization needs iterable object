example 1 :

from collections import deque
# Declaring deque de = deque(['name','age','DOB'])



example 2 :

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return None
        queue = deque([root])
        while queue:
            node = queue.popleft()
            node.left, node.right = node.right, node.left
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
        return root


Do you always insert elements into a deque using a list ?
Like in the 2nd example - this is a snippet from a code that uses BFS to invert a binary tree - the root tree node is being added inside a list to append to the deque. Why is this needed ?

Why cant it be
queue = deque(root).... wouldnt the code work then ?



Do you always insert elements into a deque using a list?

No, you do not always insert elements into a deque using a list. The deque() constructor in Python accepts an iterable as an argument. This means you can initialize a deque with any object that can be iterated over, such as:

Lists: deque(['a', 'b', 'c'])
Tuples: deque(('x', 'y'))
Strings: deque('hello') (will create a deque of individual characters: deque(['h', 'e', 'l', 'l', 'o']))
Other deques: deque(another_deque)
Generators: deque(i for i in range(5))
Why is deque([root]) used in the second example?

In the binary tree inversion example, root is a single TreeNode object, not an iterable collection of nodes. The deque() constructor expects an iterable to populate the initial deque.

deque([root]): This creates a list containing a single element, which is the root node. This list is then passed to the deque() constructor, resulting in a deque containing just the root node as its first element.
Why wouldn't deque(root) work?

deque(root) would only work if the root object itself were iterable. In the context of the provided TreeNode class, a TreeNode object is not inherently iterable. It has attributes like val, left, and right, but it doesn't define a way to iterate through its children or any other sequence of values directly.

Therefore, passing the root node directly to deque() would likely result in a TypeError because the constructor would expect an iterable.

Analogy:

Imagine you have a box (the deque) that can hold multiple items.

deque(['apple', 'banana']): You are giving the box a list ['apple', 'banana'], and it puts each item from the list into the box.
deque(['apple']): You are giving the box a list ['apple'], and it puts the single item 'apple' into the box.
deque('apple'): You are giving the box a string 'apple', which is iterable. It puts each character ('a', 'p', 'p', 'l', 'e') into the box.
deque(an_apple_object): If an_apple_object itself doesn't know how to be iterated (i.e., you can't ask it for its individual parts in a sequence), the box wouldn't know what to put inside. In the tree example, root is like an_apple_object – it's a single node, not a collection to iterate through.
In summary:

The deque() constructor needs an iterable to initialize. In the BFS for inverting a binary tree, we start with the root node. To put this single node into the deque as the initial element, we enclose it in a list [root] to make it an iterable of one element.

Your intuition about how data structures are initialized is spot on! It's important to understand what kind of input each constructor expects. In the case of deque(), it's looking for something it can loop through to add the initial elements.